;;; -*- Mode: Common-Lisp; Package: User; Base: 10.; Patch-File: T -*-
;;; Written 02/18/88 15:38:55 by CAROL,
;;; Reason: place genera 7 zmacs font compatibility back in public
;;; while running on LIBRA from band LOD9
;;; With Experimental SYSTEM 4.17, Experimental COMPILER 4.0, Experimental NAMESPACE 4.1,
;;;  Experimental TV 4.12, Experimental DATALINK 4.6, CHAOSNET 4.2, Experimental GC 4.0,
;;;  Experimental NVRAM 4.2, Experimental SYSLOG 4.0, Experimental IO 4.7, Experimental STREAMER-TAPE 4.0,
;;;  Experimental UCL 4.0, Experimental INPUT-EDITOR 4.0, Experimental PATHNAME-COLD 4.11,
;;;  Experimental FILE-COLD 4.0, Experimental METER 4.0, Experimental ZWEI 4.3, Experimental DEBUG-TOOLS 4.0,
;;;  Experimental NETWORK-SUPPORT 4.0, Experimental NETWORK-SERVICE 4.0, Experimental DATALINK-DISPLAYS 4.0,
;;;  Experimental FONT-EDITOR 4.0, Experimental SERIAL 4.0, Experimental PRINTER 4.1,
;;;  Experimental PRINTER-TYPES 1.0, Experimental IMAGEN 4.0, Experimental SUGGESTIONS 4.0,
;;;  Experimental MAIL-DAEMON 4.0, Experimental MAIL-READER 4.2, Experimental TELNET 4.0,
;;;  Experimental VT100 4.1, Experimental NAMESPACE-EDITOR 4.1, Experimental PROFILE 4.0,
;;;  VISIDOC 1.0, Experimental BUG 10.0, Experimental IP 4.0, Experimental GRAPHICS-WINDOW 4.0,
;;;  Experimental TREE 4.0,  microcode 510, Band Name: pre4.0+ip&tree 2/12

;; File created by LSS

;; BACKGROUND:  In Genera7, Symbolics started using a new convention for embedding fonts into a 
;; file.  With no special patches, such a file looks like garbage on the Explorer (you see
;; epsilon control characters, etc).  With this file loaded, the file will appear in Zmacs on
;; an Explorer just as it would on the Symbolics (fonts included).  If such a file is saved
;; from Explorer Zmacs, the fonts are embedded using the Explorer method of embedding fonts.
;; This is OK because Symbolics fully supports this "older style".


#!C
; From file DEFS.LISP#21 ZMACS; SYS:
#8R ZWEI#:
(COMPILER-LET ((*PACKAGE* (FIND-PACKAGE "ZWEI"))
                          (SI:*LISP-MODE* :COMMON-LISP)
                          (*READTABLE* SYS:COMMON-LISP-READTABLE)
                          (SI:*READER-SYMBOL-SUBSTITUTIONS* SYS::*COMMON-LISP-SYMBOL-SUBSTITUTIONS*))
  (COMPILER#:PATCH-SOURCE-FILE "SYS: ZMACS; DEFS.#"


(DEFFLAVOR INTERVAL-STREAM-WITH-FONTS
	   ((*FONT-FLAG* NIL)
	    (**FONT** 0)
	    (SYMBOLICS-FAT-MODE NIL)  ;; Use symbolics fonts - LSS
	    (SYMBOLICS-THIN-MODE NIL) ;; Don't convert epsilons - LSS
	    (HACK-EXPLORER-FONTS NIL) ;; LSS
	    (*FONT-STACK* (MAKE-ARRAY 62 ':TYPE 'ART-Q-LIST ':FILL-POINTER 0)))
	   (INTERVAL-STREAM)
  :INITABLE-INSTANCE-VARIABLES
  (:GETTABLE-INSTANCE-VARIABLES SYMBOLICS-FAT-MODE SYMBOLICS-THIN-MODE HACK-EXPLORER-FONTS)
  (:SETTABLE-INSTANCE-VARIABLES SYMBOLICS-FAT-MODE SYMBOLICS-THIN-MODE HACK-EXPLORER-FONTS))

))

#!C
; From file DISPLA.LISP#27 ZMACS; SYS:
#8R ZWEI#:
(COMPILER-LET ((*PACKAGE* (FIND-PACKAGE "ZWEI"))
                          (SI:*LISP-MODE* :COMMON-LISP)
                          (*READTABLE* SYS:COMMON-LISP-READTABLE)
                          (SI:*READER-SYMBOL-SUBSTITUTIONS* SYS::*COMMON-LISP-SYMBOL-SUBSTITUTIONS*))
  (COMPILER#:PATCH-SOURCE-FILE "SYS: ZMACS; DISPLA.#"


(DEFUN VIEW-WINDOW (WINDOW &OPTIONAL STR (RETURN-IF-NO-MORE *VIEWING-RETURN-IF-NO-MORE-DEFAULT*)
		    &AUX CH ATTRIBUTE-LIST FONTSP)
  "Display WINDOW, letting user scroll with the four lists of scrolling characters,
reading data from STR.  This is used for the editor View File, etc, commands.
STR may be a stream to read more data from, and get font names from,
or may be T, meaning do not alter the fonts set up in WINDOW already.
RETURN-IF-NO-MORE non-NIL means exit immediately on attempt
to scroll past the end of the data."
  (IF (EQ STR T)
      (SETQ STR NIL)
      (PROGN
	(AND STR (SETQ ATTRIBUTE-LIST (FS:EXTRACT-ATTRIBUTE-LIST STR)))
	(REDEFINE-WINDOW-OVERPRINTING-FLAG WINDOW (GET-ATTRIBUTE (LOCF ATTRIBUTE-LIST) :BACKSPACE))
	(REDEFINE-WINDOW-TAB-NCHARS WINDOW (GET-ATTRIBUTE (LOCF ATTRIBUTE-LIST) :TAB-WIDTH))
	(REDEFINE-FONTS WINDOW
			(AND STR
			     (SET-BUFFER-FONTS (WINDOW-INTERVAL WINDOW)
					       (GET-ATTRIBUTE (LOCF ATTRIBUTE-LIST) :FONTS)))
			(GET-ATTRIBUTE (LOCF ATTRIBUTE-LIST) :VSP)
			T)))
  (SETQ FONTSP
	(LIST
	  (OR (AND (CONSP (GET-ATTRIBUTE (LOCF ATTRIBUTE-LIST) :FONTS))
		   (CDR (GET-ATTRIBUTE (LOCF ATTRIBUTE-LIST) :FONTS)))
	      (GET-ATTRIBUTE (LOCF ATTRIBUTE-LIST) :DIAGRAM))
	  :LOOK-FOR-SYMBOLICS-FONTS))  ;;LSS

  (DO ((N-LINES (1- (WINDOW-N-PLINES WINDOW)))
       (FIRST-P T NIL)
       (AT-END-P))
      (NIL)
    (MULTIPLE-VALUE-SETQ (AT-END-P STR)
			 (VIEW-WINDOW-DISPLAY WINDOW STR FIRST-P FONTSP))
    (SELECTOR (SETQ CH (WITHOUT-IO-BUFFER-OUTPUT-FUNCTION (READ-CHAR)))
	      MEMBER
      (*VIEWING-SCROLL-FORWARD-SCREEN-CHARACTERS*
       (WHEN (AND RETURN-IF-NO-MORE AT-END-P)
	 (RETURN NIL))
       (CONDITION-CASE ()
	   (RECENTER-WINDOW-RELATIVE WINDOW N-LINES)
	 (BARF NIL)))
      (*VIEWING-SCROLL-BACKWARD-SCREEN-CHARACTERS*
       (RECENTER-WINDOW-RELATIVE WINDOW (- N-LINES)))
      (*VIEWING-SCROLL-FORWARD-LINE-CHARACTERS*
       (WHEN (AND RETURN-IF-NO-MORE
		  (= 1 (PLINE-OF-POINT NIL
				       WINDOW
				       (INTERVAL-LAST-BP (WINDOW-INTERVAL WINDOW)))))
	 (RETURN NIL))
       (CONDITION-CASE ()
	   (RECENTER-WINDOW-RELATIVE WINDOW 1)
	 (BARF NIL)))
      (*VIEWING-SCROLL-BACKWARD-LINE-CHARACTERS*
       (RECENTER-WINDOW-RELATIVE WINDOW -1))
      (*VIEWING-HELP-CHARACTERS*
       (FORMAT *QUERY-IO*
	       "~
~&Scroll forward by:   screen - ~{~:@C~^, ~}~66,6Tline - ~{~:@C~^, ~}~
~&Scroll backward by:  screen - ~{~:@C~^, ~}~66,6Tline - ~{~:@C~^, ~}~
~&Exit with:   ~{~:@C~^, ~} "
	       *VIEWING-SCROLL-FORWARD-SCREEN-CHARACTERS*
	       *VIEWING-SCROLL-FORWARD-LINE-CHARACTERS*
	       *VIEWING-SCROLL-BACKWARD-SCREEN-CHARACTERS*
	       *VIEWING-SCROLL-BACKWARD-LINE-CHARACTERS*
	       *VIEWING-EXIT-CHARACTERS*))
      (OTHERWISE
       (UNLESS (CONSP CH)
	 (COND (*VIEWING-IGNORE-NON-COMMAND-CHARACTERS*
		(WHEN (MEMBER CH *VIEWING-EXIT-CHARACTERS* :TEST #'CHAR=)
		  (RETURN NIL)))
	       (:ELSE
		(UNLESS (MEMBER CH *VIEWING-EXIT-CHARACTERS* :TEST #'CHAR=)
		  (UNREAD-CHAR CH))
		(RETURN NIL)))))))
  (VALUES (COPY-BP (WINDOW-POINT WINDOW)) CH))

))


#!C
; From file METH.LISP#37 ZMACS; SYS:
#8R ZWEI#:
(COMPILER-LET ((*PACKAGE* (FIND-PACKAGE "ZWEI"))
                          (SI:*LISP-MODE* :COMMON-LISP)
                          (*READTABLE* SYS:COMMON-LISP-READTABLE)
                          (SI:*READER-SYMBOL-SUBSTITUTIONS* SYS::*COMMON-LISP-SYMBOL-SUBSTITUTIONS*))
  (COMPILER#:PATCH-SOURCE-FILE "SYS: ZMACS; METH.#"
			       
(DEFUN INTERVAL-STREAM (FROM-BP &OPTIONAL TO-BP IN-ORDER-P HACK-FONTS NO-UNDO-SAVING)
  "Return a stream that does i/o to the specified interval.
Input reads that text, and output inserts wherever input had got to.
If only output is done, it inserts at the beginning of the interval.
HACK-FONTS = T means return epsilon prefixes if the text contains multiple fonts.
HACK-FONTS = :READ-CHAR means return characters with fonts if the text contains them.
NO-UNDO-SAVING non-NIL means do not record stream output to be undone."
  (GET-INTERVAL FROM-BP TO-BP IN-ORDER-P)
  (LET ((INSTANCE
	 (MAKE-INSTANCE
	  (CASE HACK-FONTS
	    (NIL 'INTERVAL-STREAM)
	    (:READ-CHAR 'INTERVAL-STREAM-FAT)
	    (T 'INTERVAL-STREAM-WITH-FONTS))
	  :**INTERVAL** (CREATE-INTERVAL FROM-BP TO-BP) :NO-UNDO-SAVING NO-UNDO-SAVING :*LINE*
			(BP-LINE FROM-BP) :*INDEX* (BP-INDEX FROM-BP) :*LAST-LINE*
			(BP-LINE TO-BP) :*LAST-INDEX* (BP-INDEX TO-BP) :*STOP-INDEX*
			(IF (EQ (BP-LINE FROM-BP) (BP-LINE TO-BP))
			  (BP-INDEX TO-BP)
			  (LINE-LENGTH (BP-LINE FROM-BP))))))
    (WHEN (TYPEP INSTANCE 'INTERVAL-STREAM-WITH-FONTS)
      (SEND INSTANCE :SET-HACK-EXPLORER-FONTS
	 (OR (EQ HACK-FONTS T)
	    (AND (LISTP HACK-FONTS) (EQ (SECOND HACK-FONTS) :LOOK-FOR-SYMBOLICS-FONTS)
	       (FIRST HACK-FONTS)))))
    INSTANCE))

(DEFMETHOD (INTERVAL-STREAM-WITH-FONTS :HACK-FONTS-P) NIL
  (AND (OR SYMBOLICS-FAT-MODE HACK-EXPLORER-FONTS) (NOT SYMBOLICS-THIN-MODE)))

(DEFUN MAKE-MULTI-FONT-LINE (STREAM STRING INTERVAL-OR-NIL &OPTIONAL (START 0) END)
  (DECLARE (:SELF-FLAVOR INTERVAL-STREAM-WITH-FONTS))
  (LET* ((LENGTH (OR END (LENGTH STRING)))
	 (NEWSTRING))
    (DO ((I START (1+ I)))
	((= I LENGTH)
	 (OR NEWSTRING (AND INTERVAL-OR-NIL (SEND STREAM :WRITE-CHAR #\NEWLINE))))
      (COND
	((NOT (MEMBER *FONT-FLAG* '(T NIL) :TEST #'EQ))
	 (IF NEWSTRING
	   (SEND STREAM :STRING-OUT NEWSTRING)) (SETQ NEWSTRING NIL)
	 (DO ((I1 I (1+ I1)))
	     ((OR (= I1 LENGTH) (MEMBER *FONT-FLAG* '(T NIL) :TEST #'EQ))
	      (SETQ I I1))
	   (SEND SELF :WRITE-CHAR (AREF STRING I1)))
	 (AND (= I LENGTH) (RETURN (IF INTERVAL-OR-NIL
				     (SEND STREAM :WRITE-CHAR #\NEWLINE))))))
      (OR NEWSTRING
	 (PROGN
	   (SETQ NEWSTRING
		 (IF INTERVAL-OR-NIL
		   (CREATE-LINE 'ART-FAT-STRING (- LENGTH I) INTERVAL-OR-NIL)
		   (MAKE-ARRAY (- LENGTH I) :ELEMENT-TYPE 'SYS::FAT-CHAR :FILL-POINTER 0)))
	   (SETF (ARRAY-LEADER NEWSTRING 0) 0)))
      (LET ((CH (AREF STRING I))
	    (HACK-FONTS (SEND STREAM :HACK-FONTS-P)))
	(COND
	  ((AND (EQ *FONT-FLAG* T) HACK-FONTS)
	   (COND
	     ((CHAR= CH #\) (SETQ *FONT-FLAG* NIL)
	      (VECTOR-PUSH (IN-CURRENT-FONT CH **FONT**) NEWSTRING))
	     ((CHAR= CH #\#) (SETQ *FONT-FLAG* 'DIAG-1))
	     ((CHAR= CH #\*) (SETQ *FONT-FLAG* NIL)
	      (OR (ZEROP (FILL-POINTER *FONT-STACK*)) (SETQ **FONT** (VECTOR-POP *FONT-STACK*))))
	     ((CHAR= CH #\)
	      (SETQ I (MIN (1- LENGTH) (+ I (LENGTH SYS::*SYMBOLICS-EPSILON-FONT-PASSWORD*))))
	      (SEND STREAM :SET-SYMBOLICS-FAT-MODE T) (SEND STREAM :SET-SYMBOLICS-THIN-MODE NIL)
	      (SETQ *FONT-FLAG* NIL))
	     ((AND (SEND STREAM :SYMBOLICS-FAT-MODE) (CHAR= CH #\))
	      (SEND STREAM :SET-SYMBOLICS-THIN-MODE T) (SEND STREAM :SET-SYMBOLICS-FAT-MODE NIL)
	      (SETQ *FONT-FLAG* NIL))
	     ((AND (SEND STREAM :SYMBOLICS-FAT-MODE) (CHAR= CH #\())
	      (MULTIPLE-VALUE-BIND (FONT-NUMBER NEW-I) (PARSE-SYMBOLICS-EPSILON-FONT-SPEC STRING I LENGTH)
		(INTERVAL-WITH-FONTS-IO-PUSH-FONT)
		(SETQ *FONT-FLAG* NIL
		      **FONT** FONT-NUMBER
		      I NEW-I)))
	     (T (INTERVAL-WITH-FONTS-IO-PUSH-FONT)
	      (SETQ *FONT-FLAG* NIL
		    **FONT** (- (CHAR-CODE CH) (CHAR-CODE #\0))))))
	  ((AND (EQ *FONT-FLAG* T) (NOT HACK-FONTS))
	   (COND
	     ((CHAR= CH #\)
	      (MULTIPLE-VALUE-BIND (PASSWORD-MATCH-P NEW-I) (CHECK-FOR-SYMBOLICS-FONT-PASSWORD-IN-STRING STRING I LENGTH)
		(SETF I NEW-I)
		(COND
		  (PASSWORD-MATCH-P (SEND STREAM :SET-SYMBOLICS-FAT-MODE T)
		   (SEND STREAM :SET-SYMBOLICS-THIN-MODE NIL))
		  (T (VECTOR-PUSH (IN-CURRENT-FONT #\ **FONT**) NEWSTRING)
		   (VECTOR-PUSH (IN-CURRENT-FONT CH **FONT**) NEWSTRING) (SETQ *FONT-FLAG* NIL)))))
	     (T (SETQ *FONT-FLAG* NIL) (VECTOR-PUSH (IN-CURRENT-FONT #\ **FONT**) NEWSTRING)
	      (VECTOR-PUSH (IN-CURRENT-FONT CH **FONT**) NEWSTRING))))
	  ((CHAR= CH #\) (SETQ *FONT-FLAG* T))
	  (T (VECTOR-PUSH (IN-CURRENT-FONT CH **FONT**) NEWSTRING)))))
    NEWSTRING))

(DEFUN CHECK-FOR-SYMBOLICS-FONT-PASSWORD-IN-STRING (STRING I LENGTH)
  "We have already read an  and a .  Look for the rest of the password."
  (DECLARE (VALUES PASSWORD-MATCH-P NEW-I))
  (COND
    ((STRING-EQUAL SYS::*SYMBOLICS-EPSILON-FONT-PASSWORD*
		   (SUBSEQ STRING (1+ I)
			   (MIN LENGTH (+ 1 I (LENGTH SYS::*SYMBOLICS-EPSILON-FONT-PASSWORD*)))))
     (VALUES T (MIN (1- LENGTH) (1- (+ I (LENGTH SYS::*SYMBOLICS-EPSILON-FONT-PASSWORD*))))))
    (T (VALUES NIL I))))

(DEFUN PARSE-SYMBOLICS-EPSILON-FONT-SPEC (STRING I LENGTH)
  "Parse a Symbolics Font List following an epsilon"
  (DECLARE (VALUES FONT-NUMBER NEW-I))
  (MULTIPLE-VALUE-BIND (EXP END) (READ-FROM-STRING STRING NIL NIL :START I :END LENGTH :PRESERVE-WHITESPACE T)
    (LET ((FONT
	   (OR (AND (> (LENGTH EXP) 1) (CAR (LAST EXP)))
	      (AND (EQ (LENGTH EXP) 1) (NUMBERP (CAR EXP)) (CAR EXP)) "CPTFONT"))
	  (NUMBER (CAR EXP)))
      (UNLESS (NUMBERP FONT)
	(WHEN (BOUNDP '*INTERVAL*)
	  (LET* ((BUFFER *INTERVAL*)
		 (L
		  (OR (MAPCAR #'CAR (SEND BUFFER :SEND-IF-HANDLES :SAVED-FONT-ALIST))
		     '("CPTFONT")))
		 (FONTS (MAKE-LIST (MAX (LENGTH L) (1+ NUMBER)))))
	    (DO ((J 0 (1+ J))
		 (N (LENGTH FONTS)))
		((>= J N))
	      (SETF (NTH J FONTS) (IF (= J NUMBER)
				    FONT
				    (OR (NTH J L) "CPTFONT"))))
	    (SETQ FONTS
		  (SET-BUFFER-FONTS BUFFER
				    (MAPCAR #'(LAMBDA (X)
						(INTERN (STRING X) 'FONTS)) FONTS)))
	    (DOLIST (WINDOW (SEND BUFFER :WINDOWS))
	      (REDEFINE-FONTS WINDOW FONTS (SEND BUFFER :GET-ATTRIBUTE ':VSP))))))
      (VALUES NUMBER (1- END)))))

(DEFVAR FONTS:CPTFONTCB FONTS:CPTFONTB)

(DEFUN SET-GENERA-FONTS-IN-ATTRIBUTE-LINE NIL
  (LET ((SCREEN-FONTS-ALIST (SEND *INTERVAL* :SAVED-FONT-ALIST)))
    (SEND *INTERVAL* :SET-ATTRIBUTE :FONTS
       (MAPCAR #'(LAMBDA (FONT-DESCRIPTOR)
		   (INTERN (STRING (CAR FONT-DESCRIPTOR)) 'FONTS))
	       SCREEN-FONTS-ALIST))
    (REDEFINE-FONTS *WINDOW* SCREEN-FONTS-ALIST)
    (COM-UPDATE-ATTRIBUTE-LIST)
    (COM-RECENTER-WINDOW)))

(defun saved-fonts-equal-to-font-attribute-p ()
  (let ((saved-font-alist    (send *interval* :saved-font-alist))
	(font-attribute-list (send *interval* :get-attribute :fonts)))
    (cond ((and (consp  saved-font-alist) (consp font-attribute-list))
	   (and (= (length saved-font-alist) (length font-attribute-list))
		;; See if the contents of the lists are equivalent.
		(loop for (font-string) in saved-font-alist
		      unless (member (intern font-string 'keyword) font-attribute-list)
		      return nil
		      finally (return t))))
	  ((and (consp saved-font-alist) font-attribute-list)
	   (if (= (length  saved-font-alist) 1)
	       (equal (car saved-font-alist) font-attribute-list)
	       nil))
	  ((and saved-font-alist (consp font-attribute-list))
	   (if (= (length   font-attribute-list) 1)
	       (equal (car font-attribute-list) saved-font-alist)
	       nil))
	  (t (equal font-attribute-list saved-font-alist)))
    ))

))

#!C
; From file ZMACS.LISP#64 ZMACS; SYS:
#8R ZWEI#:
(COMPILER-LET ((*PACKAGE* (FIND-PACKAGE "ZWEI"))
                          (SI:*LISP-MODE* :COMMON-LISP)
                          (*READTABLE* SYS:COMMON-LISP-READTABLE)
                          (SI:*READER-SYMBOL-SUBSTITUTIONS* SYS::*COMMON-LISP-SYMBOL-SUBSTITUTIONS*))
  (COMPILER#:PATCH-SOURCE-FILE "SYS: ZMACS; ZMACS.#"

(DEFUN MAKE-BUFFER-CURRENT (BUFFER &OPTIONAL PRESERVE-BUFFER-HISTORY)
  "Make BUFFER the current ZMACS buffer in the selected window.
PRESERVE-BUFFER-HISTORY non-NIL says do not reorder the buffers for C-M-L, etc."
  (CHECK-TYPE BUFFER ZMACS-BUFFER)
  (SEND BUFFER :SELECT PRESERVE-BUFFER-HISTORY)
  (UNLESS (OR (SEND *INTERVAL* :READ-ONLY-P) (SAVED-FONTS-EQUAL-TO-FONT-ATTRIBUTE-P))
    (SET-GENERA-FONTS-IN-ATTRIBUTE-LINE))
  NIL)

(DEFCOM COM-REVERT-BUFFER
   "Forgets changes to a specified buffer.
Reads the name of the buffer from the mini-buffer and reads back in the file
or function."
   NIL
   (LET ((BUFFER (READ-BUFFER-NAME "Buffer to revert:" *INTERVAL*)))
     (REVERT-BUFFER BUFFER)
     (UNLESS (OR (SEND *INTERVAL* :READ-ONLY-P) (SAVED-FONTS-EQUAL-TO-FONT-ATTRIBUTE-P))
       (SET-GENERA-FONTS-IN-ATTRIBUTE-LINE))
     (MUST-REDISPLAY-BUFFER BUFFER DIS-TEXT)
     DIS-NONE))

(DEFUN REVERT-FILE-BUFFER (BUFFER PATHNAME CONNECT-FLAG SELECT-FLAG QUIETLY-FLAG &AUX GENERIC-PATHNAME PATHNAME-STRING
  TRUENAME NEW-MODE)
  (COND
    ((AND (NULL (BUFFER-FILE-ID BUFFER)) (NULL PATHNAME))
     (BARF "The buffer ~A is not associated with a file." (BUFFER-NAME BUFFER))))
  (MULTIPLE-VALUE-SETQ (PATHNAME PATHNAME-STRING)
    (EDITOR-FILE-NAME PATHNAME))
  (COND
    (CONNECT-FLAG (SETF (BUFFER-NAME BUFFER) PATHNAME-STRING)
     (SETF (BUFFER-PATHNAME BUFFER) PATHNAME)))
  (SETQ GENERIC-PATHNAME (SEND PATHNAME :GENERIC-PATHNAME))
  (SETF (BUFFER-GENERIC-PATHNAME BUFFER) GENERIC-PATHNAME)
  (WITH-OPEN-FILE-CASE (STREAM PATHNAME)
     (:NO-ERROR (SETQ TRUENAME (SEND STREAM :TRUENAME))
      (WHEN (MEMBER (SEND PATHNAME :TYPE) '(NIL :UNSPECIFIC) :TEST #'EQ)
	(MULTIPLE-VALUE-SETQ (PATHNAME PATHNAME-STRING)
	  (EDITOR-FILE-NAME
	   (IF (EQUALP (SEND TRUENAME :NAME) (SEND PATHNAME :NAME))
	     (SEND PATHNAME :NEW-TYPE (SEND TRUENAME :TYPE))
	     PATHNAME))))
      (COND
	(CONNECT-FLAG (SETF (BUFFER-NAME BUFFER) PATHNAME-STRING)
	 (SETF (BUFFER-PATHNAME BUFFER) PATHNAME) (SIMILAR-BUFFER-FILES-WARNING BUFFER)))
      (OR QUIETLY-FLAG (FORMAT *QUERY-IO* "~&Reading ~A" TRUENAME))
      (LET ((THIS-VERSION (SEND TRUENAME :VERSION))
	    (INSTALLED-TRUENAME (FILE-LOADED-TRUENAME TRUENAME))
	    INSTALLED-VERSION)
	(AND INSTALLED-TRUENAME (NUMBERP THIS-VERSION)
	   (NUMBERP (SETQ INSTALLED-VERSION (SEND INSTALLED-TRUENAME :VERSION)))
	   (NOT QUIETLY-FLAG) (/= INSTALLED-VERSION THIS-VERSION)
	   (FORMAT *QUERY-IO* " (installed version is ~D)" INSTALLED-VERSION)))
      (FS:READ-ATTRIBUTE-LIST BUFFER STREAM) (SETF (BUFFER-PACKAGE BUFFER) NIL)
      (INITIALIZE-BUFFER-PACKAGE BUFFER)
      (UNLESS (SEND BUFFER :GET-ATTRIBUTE :MODE)
	(SEND BUFFER :SET-ATTRIBUTE :MODE
	   (OR (AND (EQ (SEND PATHNAME :CANONICAL-TYPE) :LISP) (LISP-MODE 'T))
	      (CDR
	       (ASSOC (SEND PATHNAME :CANONICAL-TYPE) FS::*FILE-TYPE-MODE-ALIST* :TEST #'EQUAL))
	      *DEFAULT-MAJOR-MODE*)))
      (SETQ NEW-MODE
	    (OR (GET-FILE-MAJOR-MODE (SEND BUFFER :GET-ATTRIBUTE :MODE)) 'FUNDAMENTAL-MODE))
      (LET-IF QUIETLY-FLAG ((*INTERVAL* NIL))
	 (IF (EQ BUFFER *INTERVAL*)
	   (COMPUTE-BUFFER-PACKAGE BUFFER))
	 (AND NEW-MODE (SEND BUFFER :SET-MAJOR-MODE NEW-MODE)))
      (PRESERVE-BUFFER-POINT (BUFFER)
	 (WITH-READ-ONLY-SUPPRESSED (BUFFER)
	    (LET ((*BATCH-UNDO-SAVE* T))
	      (DISCARD-UNDO-INFORMATION BUFFER)
	      (DELETE-INTERVAL BUFFER)
	      (SETF (BUFFER-TICK BUFFER) (TICK))
	      (SETF (BUFFER-FILE-READ-TICK BUFFER) *TICK*)
	      (LET ((FONTS (SET-BUFFER-FONTS BUFFER))
		    FONTS-P)
		(SETQ FONTS-P
		      (LIST (OR (CDR FONTS) (SEND BUFFER :GET-ATTRIBUTE :DIAGRAM))
			    :LOOK-FOR-SYMBOLICS-FONTS))
		(LET ((BUFFER-STREAM
		       (INTERVAL-STREAM-INTO-BP (INTERVAL-FIRST-BP BUFFER) FONTS-P)))
		  (WHEN SELECT-FLAG
		    (SEND BUFFER :ACTIVATE)
		    (MAKE-BUFFER-CURRENT BUFFER)
		    (DOTIMES (I (+ 5 (WINDOW-N-PLINES *WINDOW*)))
		      (MULTIPLE-VALUE-BIND (LINE EOFFLG) (SEND STREAM :LINE-IN LINE-LEADER-SIZE)
			(COND
			  ((NOT EOFFLG) (SEND BUFFER-STREAM :LINE-OUT LINE))
			  (:ELSE (SEND BUFFER-STREAM :STRING-OUT LINE) (RETURN NIL)))))
		    (REDISPLAY *WINDOW* :START (INTERVAL-FIRST-BP BUFFER) NIL))
		  (IF (NOT CONNECT-FLAG)
		    (STREAM-COPY-UNTIL-EOF STREAM BUFFER-STREAM LINE-LEADER-SIZE)
		    (PROGN
		      (IF (EQ CONNECT-FLAG 'NOSECTIONIZE)
			(STREAM-COPY-UNTIL-EOF STREAM BUFFER-STREAM LINE-LEADER-SIZE)
			(SECTIONIZE-FILE-BUFFER BUFFER *ZMACS-COMPLETION-AARRAY* 'ZMACS-BUFFERS
						NIL NIL STREAM FONTS-P BUFFER-STREAM))
		      (SET-BUFFER-FILE-ID BUFFER (SEND STREAM :INFO))
		      (DOLIST (WINDOW (SEND BUFFER :WINDOWS))
			(AND FONTS
			   (REDEFINE-FONTS WINDOW FONTS (SEND BUFFER :GET-ATTRIBUTE :VSP)))
			(REDEFINE-WINDOW-OVERPRINTING-FLAG WINDOW
							   (SEND BUFFER :GET-ATTRIBUTE
							      :BACKSPACE))
			(REDEFINE-WINDOW-TAB-NCHARS WINDOW
						    (SEND BUFFER :GET-ATTRIBUTE :TAB-WIDTH))))))
		(SETF (BUFFER-FILE-READ-TICK BUFFER) *TICK*)
		(NOT-MODIFIED BUFFER)))))
      (UNLESS QUIETLY-FLAG
	(IF (SEND STREAM :OPERATION-HANDLED-P :READ-POINTER)
	  (LET ((NCHARS (SEND STREAM :READ-POINTER)))
	    (IF (< NCHARS 5000)
	      (FORMAT *QUERY-IO* " -- ~D characters." NCHARS)
	      (FORMAT *QUERY-IO* " -- ~DK characters." (ROUND NCHARS 1024))))
	  (FORMAT *QUERY-IO* " -- done."))))
     (FS::FILE-NOT-FOUND (WHEN *FIND-FILE-NOT-FOUND-IS-AN-ERROR*
			   (BARF STREAM))
      (OR QUIETLY-FLAG (FORMAT *QUERY-IO* "(New File)"))
      (LET ((*BATCH-UNDO-SAVE* T))
	(DISCARD-UNDO-INFORMATION BUFFER)
	(DELETE-INTERVAL BUFFER))
      (AND CONNECT-FLAG (SET-BUFFER-FILE-ID BUFFER T))
      (SEND BUFFER :SET-ATTRIBUTE :MODE
	 (OR (AND (EQ (SEND PATHNAME :CANONICAL-TYPE) :LISP) (LISP-MODE 'T))
	    (CDR
	     (ASSOC (SEND PATHNAME :CANONICAL-TYPE) FS::*FILE-TYPE-MODE-ALIST* :TEST #'EQUAL))
	    *DEFAULT-MAJOR-MODE*))
      (SETF (BUFFER-PACKAGE BUFFER) (FIND-PACKAGE (OR *DEFAULT-PACKAGE* *PACKAGE*)))
      (LET ((MODE (GET-FILE-MAJOR-MODE (SEND BUFFER :GET-ATTRIBUTE :MODE))))
	(LET-IF QUIETLY-FLAG ((*INTERVAL* NIL))
	   (IF (EQ BUFFER *INTERVAL*)
	     (COMPUTE-BUFFER-PACKAGE BUFFER))
	   (AND MODE (SEND BUFFER :SET-MAJOR-MODE MODE)))))
     (FS::FILE-ERROR (BARF STREAM)))
  (SETF (BUFFER-TICK BUFFER) (TICK)))

))